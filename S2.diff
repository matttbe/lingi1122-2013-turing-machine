diff --git a/S2/TapeA_B.java b/S2/TapeA_B.java
index ef1cd1c..a97a41d 100644
--- a/S2/TapeA_B.java
+++ b/S2/TapeA_B.java
@@ -20,8 +20,9 @@ public class TapeA_B implements Tape {
 		
 		// to ensure the position of the read head is after the last block of init
 		String initB = init + " "; 
-		
-		// initialisation
+
+
+		// INIT
 		readhead = null;
 		Cell tempNew = null;
 		int maxLength = initB.length ();
@@ -30,10 +31,13 @@ public class TapeA_B implements Tape {
 		
 		/**
 		 * building of the tape:
-		 * 	Inv: readhead contains the last cell of a double linked list
-		 * 		 representative of the sub-chartable up to the index i 
-		 * 		 not counted. The linked list is not finished (the next 
-		 * 		 variable of readhead is not assigned).
+		 * 	Inv: we have a tabular with id between 0 and 'maxLength'.
+		 * 	     we have to read all cells.
+		 * 	     at one moment, i is between 0 and 'maxLength',
+		 * 	      all id's before i have already been read.
+		 * 	         |0    |i    |maxLength
+		 * 	         |01010101010|
+		 * 	H: i == maxLength
 		 * 	Var: i contains the index of the last char added to the
 		 * 		 structure + 1
 		 */
@@ -48,13 +52,13 @@ public class TapeA_B implements Tape {
 			i++;
 		}
 		
-		// finish the tape
+		// CLOT: finish the tape
 		readhead.next = null;
 	}
 	
 	/**
 	 * Test if the structure agreed the invariant of representation :
-	 * - characters are in the Gamma alphabet (from char n°32 to 126)
+	 * - characters are in the Gamma alphabet (from char n 32 to 126)
 	 * - no loop, linear course long the double linked list
 	 * - only one cell with a null previous and only one with a null next
 	 * - the readhead must be on the tape (not null)
@@ -62,66 +66,82 @@ public class TapeA_B implements Tape {
 	 * - B' (extended zone B with blanc at ends) zone as little as possible
 	 * @return :	true, if the object agreed the invariant of representation
 	 * 				false, if not
-	 * TODO : invariant et variant de boucle
 	 */
 	public boolean repOk() {
-		int test = 0;
-		
-		// ensure at least one block
+		// SUB-PROB1: ensure at least one block
 		if (readhead == null)
-			test++;
-			
-		// first search, to the left
-		Cell tempNow = readhead.next;
-		Cell tempPast = readhead;
+			return false;
+
+
+		/* SUB-PROB2: read all cell ; direction: to the left.
+		 * 	Aim: check if all chars are correct and if there is no double linkage
+		 */
+		// INIT
+		Cell tempNow = readhead.next;	// the current cell
+		Cell tempPast = readhead;	// the previous one
 		/**
 		 * var: at each step tempPast is the previous cell and tempNow 
-		 *      is the cell on the right
+		 *      is the cell on the right
 		 * inv: readHead is not modified
+		 * H: tempNow == null
 		 */
-		while (tempNow != null && test == 0) {
+		while (tempNow != null) {
 			// ensure an available char
 			try {
 				testChar(tempNow.content);
-			} catch (Exception e){
-				test++;
+			} catch (Exception e){
+				return false;
 			}
 			// ensure double linkage 
 			if ((tempNow.previous != tempPast) || (tempNow == readhead))
-				test++;
+				return false;
 			tempPast = tempNow;
 			tempNow = tempPast.next;
 		}
-		// test if there is not too much blanc at the end (B' as little as possible)
-		if (test == 0 && tempPast != readhead && tempPast.content == B)
-			test++;
-			
-		// second search, to the right
+
+
+		/* SUB-PROB3: if the tape contains more than one element:
+		 * 	Aim: test if there is no blank at the end
+		 */
+		if (tempPast != readhead && tempPast.content == B)
+			return false;
+
+
+		/* SUB-PROB4: read all cell ; direction: to the right.
+		 * 	Aim: check if all chars are correct and if there is no double linkage
+		 */
+		// INIT
 		tempNow = readhead.previous;
 		tempPast = readhead;
 		/**
 		 * var: at each step tempPast is the next cell and tempNow 
 		 *      is the cell on the left
 		 * inv: readHead is not modified
-		 */
-		while (tempNow != null && test == 0) {
+		 * H: tempNow == null
+		 */
+		while (tempNow != null) {
 			// ensure an available char
 			try {
 				testChar(tempNow.content);
-			} catch (Exception e) {
-				test++;
+			} catch (Exception e) {
+				return false;
 			}
 			// ensure double linkage 
 			if ((tempNow.next != tempPast) || (tempNow == readhead))
-				test++;
+				return false;
 			tempPast = tempNow;
 			tempNow = tempPast.previous;
 		}
-		// test if there is not too much blanc at the end (B' as little as possible)
-		if (test == 0 && tempPast != readhead && tempPast.content == B)
-			test++;
-		
-		return (test == 0);
+
+
+		/* SUB-PROB5: if the tape contains more than one element:
+		 * 	Aim: test if there is no blank at the end
+		 */
+		if (tempPast != readhead && tempPast.content == B)
+			return false;
+
+		// No sub-problem has failed:
+		return true;
 	}
 
 	/**
diff --git a/S2/rapport2.tex b/S2/rapport2.tex
index f057a4f..c2f5e37 100644
--- a/S2/rapport2.tex
+++ b/S2/rapport2.tex
@@ -25,7 +25,7 @@
 \renewcommand{\familydefault}{\sfdefault}
 \usepackage{listings}        % Pour l'insersion de fichiers de codes sources.
 \lstset{
-      language=bash,
+      language=Java,
       flexiblecolumns=true,
       numbers=left,
       stepnumber=1,
@@ -35,7 +35,7 @@
       commentstyle=\ttfamily\textcolor{green},
       breaklines=true,
       extendedchars=true,
-      basicstyle=\ttfamily\scriptsize,
+      basicstyle=\ttfamily\tiny,
       showstringspaces=false
     }
 %%%%%%%%%%%%%%%%%%%%
@@ -47,13 +47,24 @@
 % \tableofcontents
 
 
-Nous n'avons pas rencontrés énormément de problèmes pour implémenter le squelette qui nous était donné. Seul ont été des variables d'état nous étant inutile ou non spécifiées :
-\begin{itemize}
-\item repOkNb et checkedFor : Ces deux variables d'instance respectivement des classes TapeA\_B et Cell ne nous étaient pas spécifiées clairement. Apparament, elles devaient servir à la méthode repOk mais nous ne leur avont trouvé aucune utilité. Comme nous vérifions au fur et à mesure de bien être linké dans les deux sens au maillon précédent, nous ne devons pas les marquer mais simplement vérifier que nous ne retombont pas sur le premier maillon. Ainsi dans le cas d'une boucle qui arriverais sur un des maillons déjà testé, en testant le maillon précédent, nous savons voir qu'on ne revient pas sur nos pas et donc qu'il y a une boucle quelque part.
-\item NullPreviousEncountered et NullNextEncountered : Pour ces deux variables, nous savions à quoi elles étaient utile, c'est pourquoi nous les avons utilisées. Maintenant, il nous semblait que leur existance n'était pas obligatoire car elles indiquaient si il existe un maillon à droite ou gauche. C'est donc une redondance par rapport au simple fait de tester si la référence vers la Cell previous ou la Cell next de readhead est null. C'est donc une source d'erreur qui nous semble inutile.
-\end{itemize}
+\section*{Introduction}
+Nous n'avons pas rencontré énormément de problèmes pour implémenter le squelette qui nous était donné. Les seuls points que nous jugeons utiles de mentionner sont en rapport avec des variables d'état que nous n'avons pas utilisées car en implémentant les différentes méthodes, elles se sont jugées inutiles ou redondantes :
 
+\section{Analyse}
+\subsection{\texttt{repOkNb} et \texttt{checkedFor}}
+Ces deux variables d'instance respectivement des classes \texttt{TapeA\_B} et \texttt{Cell} ne nous étaient pas spécifiées clairement.\\
+Apparemment, elles devaient servir à la méthode \texttt{repOk}\footnote{Après la remise de la première version du rapport, il s'est avéré que, même si cette méthode se trouvait dans le squelette du programme donné, cette méthode ne devait pas être implémentée.} mais nous ne leur avons trouvé aucune utilité. Comme nous vérifions au fur et à mesure de bien lier chaque cellule dans les deux sens, nous ne devons pas les marquer mais simplement vérifier que nous ne retombons pas sur le premier maillon.\\
+Ainsi dans le cas d'une boucle qui arriverait sur un des maillons déjà testé, en testant le maillon précédent, nous savons voir que l'on ne revient pas sur nos pas et donc qu'il y a une boucle quelque part.
 
+\subsection{\texttt{NullPreviousEncountered} et \texttt{NullNextEncountered}}
+Pour ces deux variables, nous savions à quoi elles étaient utiles : savoir si la cellule précédente (resp. suivante) existait ou non. Maintenant, nous ne voyons pas de justification à leur existence vu qu'il était facilement possible de les vérifier grâce à la structure de la cellule: \texttt{cell.previous == null}.\\
+Vu que ces variables n'apportaient que de la redondance et donc un risque d'erreur supplémentaire, nous ne les avons pas utilisées.
 
+\section*{Conclusion}
+Nous avons complété le squelette comme demandé mais nous avons préféré corrigé deux-trois petites choses comme cité dans l'analyse.
+
+\appendix
+\section{Implémentation}
+\lstinputlisting{TapeA_B.java}
 
 \end{document}
